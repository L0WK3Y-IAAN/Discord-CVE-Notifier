'''
 __         ______   __       __  __    __   ______   __      __ 
/  |       /      \ /  |  _  /  |/  |  /  | /      \ /  \    /  |
$$ |      /$$$$$$  |$$ | / \ $$ |$$ | /$$/ /$$$$$$  |$$  \  /$$/ 
$$ |      $$$  \$$ |$$ |/$  \$$ |$$ |/$$/  $$ ___$$ | $$  \/$$/  
$$ |      $$$$  $$ |$$ /$$$  $$ |$$  $$<     /   $$<   $$  $$/   
$$ |      $$ $$ $$ |$$ $$/$$ $$ |$$$$$  \   _$$$$$  |   $$$$/    
$$ |_____ $$ \$$$$ |$$$$/  $$$$ |$$ |$$  \ /  \__$$ |    $$ |    
$$       |$$   $$$/ $$$/    $$$ |$$ | $$  |$$    $$/     $$ |    
$$$$$$$$/  $$$$$$/  $$/      $$/ $$/   $$/  $$$$$$/      $$/     


A Python script that periodically checks for new vulnerabilities from the JSON data provided by CISA (Cybersecurity and Infrastructure Security Agency). Here's a brief description of what your script does:

- Fetching Vulnerability Data: It retrieves JSON data containing information about known exploited vulnerabilities from the CISA website using an HTTP request.
- Parsing and Processing Vulnerability Data: It parses the JSON data and extracts relevant information about each vulnerability, such as CVE ID, severity level, description, vendor/project, product, etc.
- Scraping NVD for Additional Information: For each vulnerability, it scrapes the National Vulnerability Database (NVD) website to obtain more details, such as the base score, using BeautifulSoup library.
- Posting Vulnerabilities to Discord: It constructs Discord embeds for each vulnerability, including details like CVE ID, severity level, description, etc., and posts them to a specific Discord channel.
- Database Management: It keeps track of the vulnerabilities that have been posted to avoid reposting them by storing their CVE IDs in a SQLite database.
- Scheduled Task Execution: It runs as a Discord bot and periodically checks for new vulnerabilities every day. It uses asyncio to manage asynchronous tasks and runs an infinite loop to execute the vulnerability check at regular intervals.

Overall, the script automates the process of monitoring and sharing information about known exploited vulnerabilities with users on Discord, providing them with timely updates to help them stay informed about potential security risks.

'''  


import asyncio
import requests
import discord
from dotenv import load_dotenv
import os
from bs4 import BeautifulSoup
import sqlite3


# Load the bot token from the .env file
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

# Define a function to map severity level to color and emoji
def get_color_and_emoji(severity):
    severity = severity.lower()
    if 'critical' in severity:
        return discord.Colour(0x000000), 'âš«'  # Black circle for critical severity
    elif 'high' in severity:
        return discord.Colour(0xFF0000), 'ðŸ”´'  # Red circle for high severity
    elif 'medium' in severity:
        return discord.Colour(0xFFFF00), 'ðŸŸ¡'  # Yellow circle for medium severity
    elif 'low' in severity:
        return discord.Colour(0x0000FF), 'ðŸ”µ'  # Blue circle for low severity
    else:
        return discord.Colour.default(), ''  # Default color if severity level is not recognized

# Initialize SQLite database connection
conn = sqlite3.connect('vulnerabilities.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS posted_vulnerabilities
             (cve_id TEXT PRIMARY KEY)''')

# URL of the JSON data
url = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"

async def check_vulnerabilities():
    # Fetch the JSON data
    response = requests.get(url)

    # Check if the request was successful
    if response.status_code == 200:
        # Parse the JSON data
        json_data = response.json()

        # Iterate through vulnerabilities
        for vulnerability in json_data['vulnerabilities']:
            cve_id = vulnerability["cveID"]
            if not is_already_posted(cve_id):
                await post_vulnerability(vulnerability)

async def post_vulnerability(vulnerability):
    score_url = f'https://nvd.nist.gov/vuln/detail/{vulnerability["cveID"]}'
    score_response = requests.get(score_url)
    html_content = score_response.text

    # Parse the HTML content
    soup = BeautifulSoup(html_content, 'html.parser')

    # Locate the element containing the base score
    base_score_element = soup.find('a', id='Cvss3CnaCalculatorAnchor')
    if not base_score_element:
        base_score_element = soup.find('span', class_='severityDetail')
    
    # Extract the text of the element if found, otherwise set to 'Base score not found'
    base_score_text = base_score_element.text.strip() if base_score_element else 'Base score not found'

    # Get color and emoji based on severity level
    color, emoji = get_color_and_emoji(base_score_text)

    embed = discord.Embed(
        title=vulnerability['vulnerabilityName'],
        description=vulnerability['shortDescription'],
        url=vulnerability['notes'],
        color=color  # Set color based on severity level
    )
    embed.add_field(name='CVE ID', value=f'`{vulnerability["cveID"]}`')
    embed.add_field(name='Severity Level', value=f'{emoji} `{base_score_text}`')  # Include emoji with severity level
    embed.add_field(name='Vendor/Project', value=f'`{vulnerability["vendorProject"]}`')
    embed.add_field(name='Product', value=f'`{vulnerability["product"]}`')
    embed.add_field(name='Date Added', value=f'`{vulnerability["dateAdded"]}`')
    embed.add_field(name='Required Action', value=f'`{vulnerability["requiredAction"]}`')
    embed.add_field(name='Due Date', value=f'`{vulnerability["dueDate"]}`')
    embed.add_field(name='Known Ransomware Campaign Use', value=f'`{vulnerability["knownRansomwareCampaignUse"]}`')
    embed.add_field(name='Notes', value=f'`{vulnerability["notes"]}`')

    # Send the embed to a specific channel (replace 'CHANNEL_ID' with your channel ID)
    channel = bot.get_channel('YOUR_CHANNEL_ID_HERE')  # Replace with your channel ID
    await channel.send(embed=embed)

    # Save the CVE ID to the database
    c.execute("INSERT INTO posted_vulnerabilities VALUES (?)", (vulnerability["cveID"],))
    conn.commit()

def is_already_posted(cve_id):
    c.execute("SELECT * FROM posted_vulnerabilities WHERE cve_id=?", (cve_id,))
    return c.fetchone() is not None

# Initialize a Discord bot
intents = discord.Intents.all()
bot = discord.Client(intents=intents)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')

    # Run the vulnerability check loop every day
    while True:
        await check_vulnerabilities()
        await asyncio.sleep(86400)  # 86400 seconds = 1 day

# Run the bot with your bot token
bot.run(TOKEN)
